{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiger\\\\Desktop\\\\Invest-Calculator\\\\src\\\\App.js\";\nimport Form from './Components/Form';\nimport Header from './Components/Header';\nimport Result from './Components/Result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let fullData = [];\n  const calculateHandler = userInput => {\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    fullData = [...yearlyData];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      data: fullData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Form","Header","Result","jsxDEV","_jsxDEV","App","fullData","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","data","_c","$RefreshReg$"],"sources":["C:/Users/tiger/Desktop/Invest-Calculator/src/App.js"],"sourcesContent":["import Form from './Components/Form';\nimport Header from './Components/Header';\nimport Result from './Components/Result';\n\n\nfunction App() {\n  let fullData=[]\n    const calculateHandler = (userInput) => {\n\n        const yearlyData = []; // per-year results\n\n        let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n        const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n        const expectedReturn = +userInput['expected-return'] / 100;\n        const duration = +userInput['duration'];\n\n        // The below code calculates yearly results (total savings, interest etc)\n        for (let i = 0; i < duration; i++) {\n            const yearlyInterest = currentSavings * expectedReturn;\n            currentSavings += yearlyInterest + yearlyContribution;\n            yearlyData.push({\n                // feel free to change the shape of the data pushed to the array!\n                year: i + 1,\n                yearlyInterest: yearlyInterest,\n                savingsEndOfYear: currentSavings,\n                yearlyContribution: yearlyContribution,\n            });\n          }\n      fullData = [...yearlyData];\n    };\n  \n\nreturn (\n    <div>\n      <Header />\n    <Form onCalculate={calculateHandler} />\n    <Result data={fullData} />\n\n    \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzC,SAASC,GAAGA,CAAA,EAAG;EACb,IAAIC,QAAQ,GAAC,EAAE;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IAEpC,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACZ;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACxB,CAAC,CAAC;IACJ;IACJL,QAAQ,GAAG,CAAC,GAAGG,UAAU,CAAC;EAC5B,CAAC;EAGL,oBACIL,OAAA;IAAAe,QAAA,gBACEf,OAAA,CAACH,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACZnB,OAAA,CAACJ,IAAI;MAACwB,WAAW,EAAEjB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvCnB,OAAA,CAACF,MAAM;MAACuB,IAAI,EAAEnB;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGrB,CAAC;AAEV;AAACG,EAAA,GApCQrB,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}