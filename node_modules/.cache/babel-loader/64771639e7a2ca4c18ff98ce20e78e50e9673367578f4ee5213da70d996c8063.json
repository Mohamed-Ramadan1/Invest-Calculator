{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiger\\\\Desktop\\\\Invest-Calculator\\\\src\\\\Components\\\\CalculateProcess.js\";\nimport React from \"react\";\nimport Form from \"./Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalculateProcess = () => {\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const passedValues = {\n      ...userInput\n    };\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...    \n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onCalculate: calculateHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, this);\n};\n_c = CalculateProcess;\nexport default CalculateProcess;\nvar _c;\n$RefreshReg$(_c, \"CalculateProcess\");","map":{"version":3,"names":["React","Form","jsxDEV","_jsxDEV","CalculateProcess","calculateHandler","userInput","passedValues","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","onCalculate","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tiger/Desktop/Invest-Calculator/src/Components/CalculateProcess.js"],"sourcesContent":["import React from \"react\";\r\nimport Form from \"./Form\";\r\n\r\n\r\nconst CalculateProcess = () => {\r\n    const calculateHandler = (userInput) => {\r\n        // Should be triggered when form is submitted\r\n        // You might not directly want to bind it to the submit event on the form though...\r\n        const passedValues = {\r\n            ...userInput\r\n        }\r\n\r\n        const yearlyData = []; // per-year results\r\n\r\n        let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\r\n        const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\r\n        const expectedReturn = +userInput['expected-return'] / 100;\r\n        const duration = +userInput['duration'];\r\n\r\n        // The below code calculates yearly results (total savings, interest etc)\r\n        for (let i = 0; i < duration; i++) {\r\n            const yearlyInterest = currentSavings * expectedReturn;\r\n            currentSavings += yearlyInterest + yearlyContribution;\r\n            yearlyData.push({\r\n                // feel free to change the shape of the data pushed to the array!\r\n                year: i + 1,\r\n                yearlyInterest: yearlyInterest,\r\n                savingsEndOfYear: currentSavings,\r\n                yearlyContribution: yearlyContribution,\r\n            });\r\n        }\r\n\r\n        // do something with yearlyData ...    \r\n    };\r\n\r\n    return <Form onCalculate={calculateHandler} />\r\n};\r\nexport   default CalculateProcess ;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC3B,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACpC;IACA;IACA,MAAMC,YAAY,GAAG;MACjB,GAAGD;IACP,CAAC;IAED,MAAME,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACH,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MAC/B,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACZ;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACxB,CAAC,CAAC;IACN;;IAEA;EACJ,CAAC;;EAED,oBAAOP,OAAA,CAACF,IAAI;IAACiB,WAAW,EAAEb;EAAiB;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClD,CAAC;AAACC,EAAA,GAhCInB,gBAAgB;AAiCtB,eAAiBA,gBAAgB;AAAE,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}