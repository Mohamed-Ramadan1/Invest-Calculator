{"ast":null,"code":"import React from \"react\";\nconst CalculateHandler = props => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput['expected-return'] / 100;\n  const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n  }\n\n  // do something with yearlyData ...\n  console.log(yearlyData);\n  return;\n};\n_c = CalculateHandler;\nexport default CalculateHandler;\nvar _c;\n$RefreshReg$(_c, \"CalculateHandler\");","map":{"version":3,"names":["React","CalculateHandler","props","yearlyData","currentSavings","userInput","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","console","log","_c","$RefreshReg$"],"sources":["C:/Users/tiger/Desktop/Invest-Calculator/src/Components/CalculateProcess.js"],"sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst CalculateHandler = (props) => {\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n\r\n    const yearlyData = []; // per-year results\r\n\r\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput['expected-return'] / 100;\r\n    const duration = +userInput['duration'];\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n         const yearlyInterest = currentSavings * expectedReturn;\r\n        currentSavings += yearlyInterest + yearlyContribution;\r\n        yearlyData.push({\r\n        // feel free to change the shape of the data pushed to the array!\r\n        year: i + 1,\r\n        yearlyInterest: yearlyInterest,\r\n        savingsEndOfYear: currentSavings,\r\n        yearlyContribution: yearlyContribution,\r\n        });\r\n    }\r\n\r\n    // do something with yearlyData ...\r\n    console.log(yearlyData)\r\n    return;\r\n};\r\n\r\n\r\nexport default CalculateHandler;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAChC;EACA;;EAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,cAAc,GAAG,CAACC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMC,kBAAkB,GAAG,CAACD,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAME,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMG,QAAQ,GAAG,CAACH,SAAS,CAAC,UAAU,CAAC;;EAEvC;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IAC9B,MAAMC,cAAc,GAAGN,cAAc,GAAGG,cAAc;IACvDH,cAAc,IAAIM,cAAc,GAAGJ,kBAAkB;IACrDH,UAAU,CAACQ,IAAI,CAAC;MAChB;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAC9BG,gBAAgB,EAAET,cAAc;MAChCE,kBAAkB,EAAEA;IACpB,CAAC,CAAC;EACN;;EAEA;EACAQ,OAAO,CAACC,GAAG,CAACZ,UAAU,CAAC;EACvB;AACJ,CAAC;AAACa,EAAA,GA3BIf,gBAAgB;AA8BtB,eAAeA,gBAAgB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}